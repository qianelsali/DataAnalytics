node {

    stage('Preparation') { 
        // for display purposes
        // Get some code from a GitHub repository
        // git [url:'https://address', credentialsId: <credentialsId>]
        // cleanWs()
        // this is a test comment delete after
        git url: 'https://address', credentialsId: <credentialsId>, branch: <BranchName>
    }
      

    
      stage('BuildContainer'){
         sh 'pwd'
         sh 'docker build -t <devAPI> .'
      }
      
      stage('PushAppECR') {
        sh '''
        pwd
        $(aws ecr get-login --no-include-email --region us-west-2)
        docker tag <devAPI>:latest <900000000000>.dkr.ecr.us-west-2.amazonaws.com/<devAPI>:latest
        docker push <900000000000>.dkr.ecr.us-west-2.amazonaws.com/apiname:latest  
        '''
      }

      stage ('try') {
        sh '''
        ssh ubuntu@address <<EOF
        date
        hostname
        kubectl get nodes
        pwd
        whoami
        sudo $(aws ecr get-login --no-include-email --region us-west-2)

        sudo docker pull <900000000000>.dkr.ecr.us-west-2.amazonaws.com/<devAPI>:latest
        kubectl get pods -o wide
        kubectl scale --replicas=0 deployment app_deployment
        kubectl scale --replicas=1 deployment app_deployment 
        '''
      }

      stage ('RunModule_1') {
        echo "Running the database schedule"
        pwd
        sh 'python3.6 ./<Module1_name>.py'
      }        

      stage ('RunModule_2') {
        echo "Running the database schedule"
        pwd
        sh 'python3.6 ./<Module2_name>.py'
      }  
      
      
      stage('SendNotification') {
          sh 'aws sns publish --topic-arn "arn:aws:sns:us-west-2:<900000000000>:kubernetes-my-api" --message "APP has been updated and deployed in kubernetes eks cluster."'
      }
  
}   
